generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  googleId  String   @unique
  createdAt DateTime @default(now())

  // Credit system fields
  credits            Decimal  @default(0) @db.Decimal(10, 2) // Current credit balance
  creditVersion      Int      @default(0) // Optimistic concurrency control version
  totalCreditsEarned Decimal  @default(0) @db.Decimal(12, 2) // Lifetime credits earned
  totalCreditsSpent  Decimal  @default(0) @db.Decimal(12, 2) // Lifetime credits spent
  lastCreditUpdate   DateTime @default(now()) // Last credit operation timestamp

  // User Context - stores context items about the user
  userContext        String[] @default([]) // Array of user context strings (max 30)
  lastProjectContextHash String?

  projects             Project[]
  conversationHistory  ConversationHistory[]
  videoConcepts        VideoConcept[]
  webResearchQueries   WebResearchQuery[]
  contentSummaries     ContentSummary[]
  videoSegmentations   VideoSegmentation[]
  generatedImages      GeneratedImage[]
  generatedVideos      GeneratedVideo[]
  generatedVoiceovers  GeneratedVoiceover[]
  characterGenerations CharacterGeneration[]
  creditTransactions   CreditTransaction[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Project Context - stores context summaries for this project
  projectSummaries String[] @default([]) // Array of project summary strings

  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations        ConversationHistory[]
  videoConcepts        VideoConcept[]
  webResearchQueries   WebResearchQuery[]
  contentSummaries     ContentSummary[]
  videoSegmentations   VideoSegmentation[]
  generatedImages      GeneratedImage[]
  generatedVideos      GeneratedVideo[]
  generatedVoiceovers  GeneratedVoiceover[]
  characterGenerations CharacterGeneration[]

  completedSteps    String[] @default([]) // Replaces the projectStates map
  userPrompts       String[] @default([]) // Stores all user prompts for this project

  // Add this new relation
  videoPreferences     UserVideoPreferences?

}


model UserVideoPreferences {

  id          String   @id @default(cuid())
  projectId   String   @unique // One preference set per project
  
  // Required fields
  videoType        String  // 'product_showcase', 'talking_head', 'third_person_ad', 'project_explainer'
  userPrompt       String  // User's description of their video project (was userDescription)
  
  // 5 Preference Questions
  visualStyle          String? // 'luxury_premium', 'clean_minimal', 'warm_natural', 'futuristic_tech'
  lightingMood         String? // 'dramatic_cinematic', 'bright_professional', 'golden_hour', 'studio_controlled'
  cameraStyle          String? // 'smooth_cinematic', 'dynamic_engaging', 'steady_professional', 'product_focused'
  subjectFocus         String? // 'person_speaking', 'product_showcase', 'lifestyle_scene', 'abstract_concept'
  locationEnvironment  String? // 'studio_minimal', 'office_professional', 'lifestyle_natural', 'luxury_premium'
  
  // Final computed config (stores all merged JSON values)
  finalConfig Json?

  //store the string data for the individual segments

  setTheScene         String?
  ruinThings          String?
  theBreakingPoint    String?
  cleanUpTheMess      String?
  wrapItUp            String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Credit system models
model CreditTransaction {
  id            String                  @id @default(cuid())
  userId        String
  amount        Decimal                 @db.Decimal(10, 2) // Credit amount (positive for credits, negative for debits)
  balanceAfter  Decimal                 @db.Decimal(10, 2) // User balance after this transaction
  type          CreditTransactionType
  status        CreditTransactionStatus @default(PENDING)
  operationType String? // e.g., "IMAGE_GENERATION", "VIDEO_GENERATION"
  modelUsed     String? // e.g., "imagen", "recraft", "veo2"
  operationId   String? // Reference to the specific operation
  isEditCall    Boolean                 @default(false) // Whether this used edit call pricing
  metadata      Json? // Additional operation details
  description   String? // Human-readable description
  createdAt     DateTime                @default(now())
  processedAt   DateTime? // When the transaction was completed

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([operationType, modelUsed])
}

enum CreditTransactionType {
  DEDUCTION
  REFUND
  PURCHASE
}

enum CreditTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model ConversationHistory {
  id        String               @id @default(cuid())
  type      ConversationTypeEnum
  userInput String
  response  String
  metadata  Json?
  projectId String
  userId    String
  createdAt DateTime             @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ConversationTypeEnum {
  CONCEPT_GENERATION
  WEB_RESEARCH
  CONTENT_SUMMARY
  VIDEO_SEGMENTATION
  IMAGE_GENERATION
  VIDEO_GENERATION
  VOICEOVER_GENERATION
  CHARACTER_GENERATION
  GENERAL_CHAT
  PROJECT_CONTEXT_UPDATE
}

model VideoConcept {
  id        String   @id @default(cuid())
  prompt    String
  webInfo   String
  title     String
  concept   String
  tone      String
  goal      String
  summary   String?  // AI-generated summary of the concept
  projectId String?
  userId    String
  createdAt DateTime @default(now())

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WebResearchQuery {
  id        String   @id @default(cuid())
  prompt    String
  response  String
  projectId String?
  userId    String
  createdAt DateTime @default(now())

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContentSummary {
  id              String   @id @default(cuid())
  originalContent String
  userInput       String
  summary         String
  projectId       String?
  userId          String
  createdAt       DateTime @default(now())

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VideoSegmentation {
  id             String   @id @default(cuid())
  prompt         String
  concept        String
  negativePrompt String?
  artStyle       String
  model          String
  summary        String?  
  isSelected     Boolean  @default(false)
  projectId      String?
  userId         String
  createdAt      DateTime @default(now())

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  project  Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments VideoSegment[]
}

model VideoSegment {
  id                  String   @id @default(cuid())
  segmentId           String
  visual              String
  narration           String
  animation           String
  videoSegmentationId String?
  createdAt           DateTime @default(now())

  videoSegmentation VideoSegmentation? @relation(fields: [videoSegmentationId], references: [id], onDelete: Cascade)
  GeneratedImage    GeneratedImage[]
}

model GeneratedImage {
  id             String   @id @default(cuid())
  visualPrompt   String
  artStyle       String
  uuid           String
  success        Boolean
  s3Key          String?
  model          String?
  message        String?
  imageSizeBytes Int?
  projectId      String?
  userId         String
  createdAt      DateTime @default(now())
  videoSegmentId String?

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  videoSegment VideoSegment? @relation(fields: [videoSegmentId], references: [id], onDelete: Cascade)
  project      Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeneratedVideo {
  id              String   @id @default(cuid())
  animationPrompt String
  artStyle        String
  imageS3Key      String
  uuid            String
  success         Boolean
  model           String?
  totalVideos     Int?
  projectId       String?
  userId          String
  createdAt       DateTime @default(now())

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  project    Project?             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoFiles GeneratedVideoFile[]
}

model GeneratedVideoFile {
  id               String   @id @default(cuid())
  s3Key            String
  generatedVideoId String
  createdAt        DateTime @default(now())

  generatedVideo GeneratedVideo @relation(fields: [generatedVideoId], references: [id], onDelete: Cascade)
}

model GeneratedVoiceover {
  id              String   @id @default(cuid())
  narrationPrompt String
  s3Key           String
  projectId       String?
  userId          String
  createdAt       DateTime @default(now())

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CharacterGeneration {
  id                  String   @id @default(cuid())
  name                String?
  description         String?
  referenceImages     String[] // Array of 6 image S3 keys
  spriteSheetS3Key    String?
  finalCharacterS3Key String?
  visualPrompt        String
  artStyle            String
  uuid                String
  success             Boolean  @default(false)
  model               String?
  message             String?
  projectId           String?
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  creditsUsed         Decimal? @db.Decimal(8, 2)
  creditTransactionId String?
  isRefunded          Boolean  @default(false)

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

