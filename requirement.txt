Here is a structured AI prompt summarizing your requirements and the ordered implementation steps, ready to use in an AI IDE for code generation or automation. This will guide the AI to upgrade your current NestJS backend with Google OAuth authentication, a minimal login website, and robust user/session persistence (via Prisma and Postgres):

Prompt: Implement Google OAuth Login Flow for Desktop App Backend with NestJS, Prisma, and Postgres

Requirements:

    Upgrade my existing NestJS backend for Google OAuth-based login suitable for use with a desktop client application.

    Include user persistence in PostgreSQL using Prisma.

    Add authentication endpoints and a minimal frontend website for the login flow.

    Use only Google login (OAuth), no username/password for now.

    After successful login via the website, automatically return the authentication result (JWT/session token) to the desktop app (via redirect).

    Securely generate and store JWTs or sessions for authenticated user requests.

Implementation Steps:

    Google OAuth Setup

        Create a project on Google Cloud Console.

        Set up OAuth credentials (get CLIENT_ID and CLIENT_SECRET).

        Set authorized redirect URI: http://localhost:3000/auth/google-redirect.

        Add these values to .env:

    text
    GOOGLE_CLIENT_ID=your-client-id
    GOOGLE_CLIENT_SECRET=your-client-secret
    DATABASE_URL=your-postgres-connection-string

Install Dependencies

    Ensure these are installed in the project:

    text
    npm install @nestjs/passport passport passport-google-oauth20 @nestjs/config
    npm install @prisma/client prisma --save
    npm install express-session cookie-parser
    npm install -D @types/passport-google-oauth20

Initialize Prisma and User Model

    Initialize Prisma if not done:

text
npx prisma init

Update prisma/schema.prisma with a User model:

text
model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  googleId  String  @unique
  avatar    String?
  createdAt DateTime @default(now())
}

Run:

    text
    npx prisma migrate dev --name init

NestJS Modules and Services

    Generate modules/services if not present:

    text
    nest g module auth
    nest g service auth
    nest g controller auth
    nest g module users
    nest g service users

Google Strategy Integration

    Create src/auth/google.strategy.ts:

    typescript
    import { PassportStrategy } from '@nestjs/passport';
    import { Strategy, VerifyCallback } from 'passport-google-oauth20';
    import { Injectable } from '@nestjs/common';
    import { ConfigService } from '@nestjs/config';
    import { UsersService } from '../users/users.service';

    @Injectable()
    export class GoogleStrategy extends PassportStrategy(Strategy, 'google') {
      constructor(
        private configService: ConfigService,
        private usersService: UsersService,
      ) {
        super({
          clientID: configService.get('GOOGLE_CLIENT_ID'),
          clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),
          callbackURL: 'http://localhost:3000/auth/google-redirect',
          scope: ['email', 'profile'],
        });
      }

      async validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback) {
        // Find or create user in DB using Prisma
        const { id, emails, displayName, photos } = profile;
        const user = await this.usersService.findOrCreate({
          email: emails[0].value,
          googleId: id,
          name: displayName,
          avatar: photos[0].value,
        });
        done(null, user);
      }
    }

    Register this strategy in the AuthModule providers.

Implement Auth Guards and Controller

    Add a Passport guard (GoogleOAuthGuard) for 'google'.

    In auth.controller.ts, create endpoints:

        GET /auth/google → triggers Google OAuth.

        GET /auth/google-redirect → finishes OAuth, issues a JWT, and redirects the browser to myapp://auth-callback?token=....

User Service (Prisma)

    In users.service.ts, implement findOrCreate({ googleId, email, name, avatar }) to find user by Google ID or create a new one.

JWT Generation

    On successful authentication, sign a JWT for the user.

    Example:

        typescript
        const token = this.jwtService.sign({ sub: user.id, email: user.email });

    Website / Redirect Page

        If desired, provide a minimal web frontend:

            Just a button: "Login with Google" → link to /auth/google.

            This page can be very simple: HTML file or React/Vue page (your choice).

    Desktop App Integration

        When user clicks "Login," open the site at /auth/google in browser/webview.

        After login, Google redirects to /auth/google-redirect.

        Backend finishes, issues JWT, then redirects to a custom URI (myapp://auth-callback?token=...) which the desktop app listens for.

        Desktop app receives the token and uses it for API calls.

AI IDE, please:

    Refactor the backend to follow these steps and best practices.

    Add necessary code files and service methods.

    Do not introduce username/password routes.

    Ensure authentication flow is secure and scalable.

    Document any code that’s added or changed for clarity.

Notes:

    Use references 

for specific code styles and integrating Google OAuth in NestJS.

The website can be a very simple interface just to start the OAuth flow—no need for complex UI.

JWT return can be adapted to your app's consumption method (e.g., via redirect or API JSON response).
